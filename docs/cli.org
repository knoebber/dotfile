#+TITLE: CLI Documentation
* Install
:PROPERTIES:
:custom_id: install
:END:
Dotfile should work on most unix systems. [[https://golang.org][Golang]] is required to build Dotfile.


*Install with go get*
#+BEGIN_SRC bash
GO111MODULE=on go get github.com/knoebber/dotfile/cmd/dotfile@latest
#+END_SRC

*Install with make*
#+BEGIN_SRC bash
git clone https://github.com/knoebber/dotfile
cd dotfile
make dotfile
# copy bin/dotfile to somewhere in $PATH.
#+END_SRC

*Shell Completion*

Add the following to your =~/.bashrc= or equivalent:
#+BEGIN_SRC:
eval "$(dotfile --completion-script-bash)"
#+END_SRC
Or
#+BEGIN_SRC:
eval "$(dotfile --completion-script-zsh)"
#+END_SRC
* Overview
The Dotfile CLI is a version control system for single files. When a
file is checked in an *alias* is created. The alias is mapped to the
path. This allows for quick access regardless of the working
directory. For example, the following command prints the content in
=~/.bashrc=:
#+BEGIN_SRC:
dotfile show bashrc
#+END_SRC

Use =dotfile --help= to learn more.
* Data Storage
Dotfile stores tracking data in =~/.local/share/dotfile=.
If its parent directory does not exist it will fallback to =~/.dotfile=.
The storage directory can be changed with the =--storage-dir= flag.
For every tracked file there is a =.json= file and a directory for its commits.

*Example: ~/.local/share/dotfile/bashrc.json*
#+BEGIN_SRC javascript
{
  "path": "~/.bashrc",
  "revision": "599a1af0398b7c518bc46aaa4a9e8ae72c2d28cb",
  "commits": [
    {
      "hash": "d47481afa38dcab0d8c8d163aa75e0cf5af6e355",
      "message": "Initial commit",
      "timestamp": 1590956605
    },
    {
      "hash": "599a1af0398b7c518bc46aaa4a9e8ae72c2d28cb",
      "message": "Add alias for dotfile",
      "timestamp": 1593576508
    }
  ]
}
#+END_SRC
The revision field is the hash of the current version. Each hash in
the commit list represents a complete snapshot of the file at
timestamp. Hashes are the sha1 sum of the file content.

File revisions are compressed with zlib and named as the hash. In this
example there would be the following files containing compressed
snapshots of =~/.bashrc=:

+ *~/.local/share/dotfile/bashrc/d47481afa38dcab0d8c8d163aa75e0cf5af6e355*
+ *~/.local/share/dotfile/bashrc/599a1af0398b7c518bc46aaa4a9e8ae72c2d28cb*

Dotfile doesn't have merge conflicts or issue with rewriting
history. It's possible to restore revisions manually by decompressing
the revision files with zlib.
* User Config
Remote commands require a user configuration. By default Dotfile
creates a directory in a location returned by the Golang
function [[https://golang.org/pkg/os/#UserConfigDir][os.UserConfigDir()]]. This can be overridden with the global
=--config-file= flag.

The config file can be edited manually or with the =dotfile config=
command. The config file has the following keys:
+ *remote*  - The remote server to use.
+ *username* - A Dotfilehub username. Pull, push, and commands with the =--remote= flag use this for account lookups.
+ *token* - A secret required for writing to a remote server. Find this under "Settings" / "Setup CLI" in the web interface.

*Example: ~/.config/dotfile/dotfile.json*
#+BEGIN_SRC javascript
{
  "remote": "https://dotfilehub.com",
  "token": "eb19981fa4a7d29a42be2ed46790bf4ff307ba20d454ee06",
  "username": "knoebber"
}
#+END_SRC
* Init
Initialize a file.
#+BEGIN_SRC bash
dotfile init <path> <alias>
#+END_SRC
Alias is optional. It's generated from the path when empty.

Initialize as "bashrc":
#+BEGIN_SRC bash
dotfile init ~/.bashrc
#+END_SRC
Initialize as "i3":
#+BEGIN_SRC bash
dotfile init ~/.config/i3/config i3
#+END_SRC
When the file is inside the home directory =$HOME= is replaced with "~" in the saved path.
This allows the file to be installed to the same relative location regardless of user.

The absolute path is saved when the file is outside of the home directory.
* Show
Show a file's content.
#+BEGIN_SRC bash
dotfile show <alias>
#+END_SRC
+ =-d, --data= Show the file's json data.
+ =-r, --remote= Show a file on a remote server.
+ =-u, --username= Override the configured username.
* List
List tracked files. Asterisks are added to files that have uncommitted
changes.
#+BEGIN_SRC bash
dotfile ls
#+END_SRC
+ =-p, --path= Include the file path in the output.
+ =-r, --remote= List the remote users files.
+ =-u, --username= Override the configured username.
* Edit
Open a file in =$EDITOR=
#+BEGIN_SRC bash
dotfile edit <alias>
#+END_SRC
* Diff
Print the changes of a file against a past commit.  Commit hash is
optional - defaults to the current commit.
#+BEGIN_SRC bash
dotfile diff <alias> <commit-hash>
#+END_SRC
* Log
Print a log of commits for a file.
#+BEGIN_SRC bash
dotfile log <alias>
#+END_SRC
* Commit
Save the current revision of the file.
#+BEGIN_SRC bash
dotfile commit <alias> <message>
#+END_SRC
Message is optional.
* Checkout
Revert a file to a past revision.
#+BEGIN_SRC bash
dotfile checkout <alias> <hash>
#+END_SRC
+ =-f, --force= Overwrite unsaved changes

Hash defaults to the current revision when empty.

To checkout a specific revision use =dotfile log= to find the hash.
* Config
Read and set user configuration.
#+BEGIN_SRC bash
dotfile config <keyname> <value>
#+END_SRC Set a config value
Keyname and value are optional. Prints the current config when empty.

Valid values for keyname are =username=, =remote=, or =token=.
* Push
Push a file and its revisions to a remote server.
#+BEGIN_SRC bash
dotfile push <alias>
#+END_SRC
The remote file will either be created or updated to the current
revision of the local file. All new local revisions will be saved to
the remote server.
* Pull
Retrieves a file and its new revisions from a remote server. Creates a
new file at path when it does not yet exist.
#+BEGIN_SRC bash
dotfile pull <alias>
#+END_SRC
+ =-u, --username= Override the configured username.
+ =-a, --all= Pull all files.

Alternatively pull a file without using the Dotfile CLI:
#+BEGIN_SRC bash
# Get a list of user's files:
curl https://dotfilehub.com/api/knoebber
# Output: [bashrc, inputrc, vim, emacs]

# Install the file:
curl https://dotfilehub.com/knoebber/inputrc > ~/.inputrc
#+END_SRC
* Move
Change a file's path.
#+BEGIN_SRC bash
dotfile mv <alias> <path>
#+END_SRC
+ =-p, --parent-dirs= Create parent directories that don't exist.
* Rename
Change a file's alias.
#+BEGIN_SRC bash
dotfile rename <alias> <new-alias>
#+END_SRC
* Forget
Untracks a file - removes all Dotfile data for the file. Leaves the
file in its current state on the filesystem.
#+BEGIN_SRC bash
dotfile forget <alias>
#+END_SRC
+ =-c, --commits= Remove all data except for the current revision. (Deletes history)
* Remove
Untrack and remove the file from the filesystem. Equivalent to =dot forget bashrc && rm ~/.bashrc=.
#+BEGIN_SRC bash
dotfile rm <alias>
#+END_SRC
